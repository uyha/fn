// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#pragma once
#ifndef FN_ENABLE_OVERLOAD
#define FN_ENABLE_OVERLOAD 1
#endif

#if FN_NO_PROPAGATE_NOEXCEPT
#define FN_NOEXCEPT
#else
#define FN_NOEXCEPT noexcept
#endif

namespace river {
namespace detail {
template <typename T>
struct remove_reference {
  using type = T;
};
template <typename T>
struct remove_reference<T &> {
  using type = T;
};
template <typename T>
struct remove_reference<T &&> {
  using type = T;
};

template <typename T>
struct is_lvalue_reference {
  static constexpr bool value = false;
};
template <typename T>
struct is_lvalue_reference<T &> {
  static constexpr bool value = true;
};

template <typename T>
struct is_member_function_pointer {
  static constexpr bool value = false;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...)> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) volatile> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const volatile> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) &> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const &> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) volatile &> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const volatile &> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) &&> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const &&> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) volatile &&> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const volatile &&> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) volatile noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const volatile noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) &noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const &noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) volatile &noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const volatile &noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) &&noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const &&noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) volatile &&noexcept> {
  static constexpr bool value = true;
};
template <typename R, typename T, typename... Args>
struct is_member_function_pointer<R (T::*)(Args...) const volatile &&noexcept> {
  static constexpr bool value = true;
};
template <typename T>
constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

template <bool, typename T = void>
struct enable_if;
template <typename T>
struct enable_if<true, T> {
  using type = T;
};
template <bool cond, typename T = void>
using enable_if_t = typename enable_if<cond, T>::type;

template <typename T>
constexpr T &&forward(typename remove_reference<T>::type &t) noexcept {
  return static_cast<T &&>(t);
}
template <typename T>
constexpr T &&forward(typename remove_reference<T>::type &&t) noexcept {
  static_assert(!is_lvalue_reference<T>::value);
  return static_cast<T &&>(t);
}

template <typename T, auto>
struct FnImpl;

// region Free functions
template <typename R, typename... Args, R (*fn)(Args...)>
struct FnImpl<R (*)(Args...), fn> {
  constexpr R operator()(Args... args) const {
    return fn(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename... Args, R (*fn)(Args...) noexcept>
struct FnImpl<R (*)(Args...) noexcept, fn> {
  constexpr R operator()(Args... args) const FN_NOEXCEPT {
    return fn(river::detail::forward<Args>(args)...);
  }
};
// endregion

// region Member functions
template <typename R, typename T, typename... Args, R (T::*fn)(Args...)>
struct FnImpl<R (T::*)(Args...), fn> {
  constexpr R operator()(T &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T &&obj, Args... args) const {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
#endif
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const>
struct FnImpl<R (T::*)(Args...) const, fn> {
  constexpr R operator()(T const &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) volatile>
struct FnImpl<R (T::*)(Args...) volatile, fn> {
  constexpr R operator()(T volatile &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T volatile &&obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#endif
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const volatile>
struct FnImpl<R (T::*)(Args...) const volatile, fn> {
  constexpr R operator()(T const volatile &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T const volatile &&obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#endif
};

template <typename R, typename T, typename... Args, R (T::*fn)(Args...) &>
struct FnImpl<R (T::*)(Args...) &, fn> {
  constexpr R operator()(T &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const &>
struct FnImpl<R (T::*)(Args...) const &, fn> {
  constexpr R operator()(T const &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) volatile &>
struct FnImpl<R (T::*)(Args...) volatile &, fn> {
  constexpr R operator()(T volatile &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const volatile &>
struct FnImpl<R (T::*)(Args...) const volatile &, fn> {
  constexpr R operator()(T const volatile &obj, Args... args) const {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};

template <typename R, typename T, typename... Args, R (T::*fn)(Args...) &&>
struct FnImpl<R (T::*)(Args...) &&, fn> {
  constexpr R operator()(T &&obj, Args... args) const {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const &&>
struct FnImpl<R (T::*)(Args...) const &&, fn> {
  constexpr R operator()(T const &&obj, Args... args) const {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) volatile &&>
struct FnImpl<R (T::*)(Args...) volatile &&, fn> {
  constexpr R operator()(T volatile &&obj, Args... args) const {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const volatile &&>
struct FnImpl<R (T::*)(Args...) const volatile &&, fn> {
  constexpr R operator()(T const volatile &&obj, Args... args) const {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};

template <typename R, typename T, typename... Args, R (T::*fn)(Args...) noexcept>
struct FnImpl<R (T::*)(Args...) noexcept, fn> {
  constexpr R operator()(T &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T &&obj, Args... args) const FN_NOEXCEPT {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
#endif
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const noexcept>
struct FnImpl<R (T::*)(Args...) const noexcept, fn> {
  constexpr R operator()(T const &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) volatile noexcept>
struct FnImpl<R (T::*)(Args...) volatile noexcept, fn> {
  constexpr R operator()(T volatile &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T volatile &&obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#endif
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const volatile noexcept>
struct FnImpl<R (T::*)(Args...) const volatile noexcept, fn> {
  constexpr R operator()(T const volatile &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T const volatile &&obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
#endif
};

template <typename R, typename T, typename... Args, R (T::*fn)(Args...) &noexcept>
struct FnImpl<R (T::*)(Args...) &noexcept, fn> {
  constexpr R operator()(T &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const &noexcept>
struct FnImpl<R (T::*)(Args...) const &noexcept, fn> {
  constexpr R operator()(T const &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) volatile &noexcept>
struct FnImpl<R (T::*)(Args...) volatile &noexcept, fn> {
  constexpr R operator()(T volatile &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const volatile &noexcept>
struct FnImpl<R (T::*)(Args...) const volatile &noexcept, fn> {
  constexpr R operator()(T const volatile &obj, Args... args) const FN_NOEXCEPT {
    return (obj.*fn)(river::detail::forward<Args>(args)...);
  }
};

template <typename R, typename T, typename... Args, R (T::*fn)(Args...) &&noexcept>
struct FnImpl<R (T::*)(Args...) &&noexcept, fn> {
  constexpr R operator()(T &&obj, Args... args) const FN_NOEXCEPT {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const &&noexcept>
struct FnImpl<R (T::*)(Args...) const &&noexcept, fn> {
  constexpr R operator()(T const &&obj, Args... args) const FN_NOEXCEPT {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) volatile &&noexcept>
struct FnImpl<R (T::*)(Args...) volatile &&noexcept, fn> {
  constexpr R operator()(T volatile &&obj, Args... args) const FN_NOEXCEPT {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};
template <typename R, typename T, typename... Args, R (T::*fn)(Args...) const volatile &&noexcept>
struct FnImpl<R (T::*)(Args...) const volatile &&noexcept, fn> {
  constexpr R operator()(T const volatile &&obj, Args... args) const FN_NOEXCEPT {
    return (river::detail::forward<decltype(obj)>(obj).*fn)(river::detail::forward<Args>(args)...);
  }
};

#if __cpp_concepts >= 201907
template <typename R, typename T, R(T::*fn)>
requires(!is_member_function_pointer_v<R(T::*)>) struct FnImpl<R(T::*), fn> {
  constexpr R operator()(T const &obj) const {
    return obj.*fn;
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T const volatile &obj) const {
    return obj.*fn;
  }
#endif
};
#else
template <typename R, typename T, R(T::*fn)>
struct FnImpl<enable_if_t<!is_member_function_pointer_v<R(T::*)>, R(T::*)>, fn> {
  constexpr R operator()(T const &obj) const {
    return obj.*fn;
  }
#if FN_ENABLE_OVERLOAD
  constexpr R operator()(T const volatile &obj) const {
    return obj.*fn;
  }
  constexpr R operator()(T const volatile &&obj) const {
    return obj.*fn;
  }
#endif
};
#endif
// endregion

} // namespace detail

template <auto fp>
using fn = detail::FnImpl<decltype(fp), fp>;
} // namespace river